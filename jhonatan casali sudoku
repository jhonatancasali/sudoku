import java.util.Scanner;

public class Sudoku {
    private static final int SIZE = 9;
    private static int[][] board = new int[SIZE][SIZE];

    public static void main(String[] args) {
        // Exemplo de tabuleiro inicial (0 = vazio)
        int[][] initialBoard = {
            {5, 3, 0, 0, 7, 0, 0, 0, 0},
            {6, 0, 0, 1, 9, 5, 0, 0, 0},
            {0, 9, 8, 0, 0, 0, 0, 6, 0},
            {8, 0, 0, 0, 6, 0, 0, 0, 3},
            {4, 0, 0, 8, 0, 3, 0, 0, 1},
            {7, 0, 0, 0, 2, 0, 0, 0, 6},
            {0, 6, 0, 0, 0, 0, 2, 8, 0},
            {0, 0, 0, 4, 1, 9, 0, 0, 5},
            {0, 0, 0, 0, 8, 0, 0, 7, 9}
        };

        // Copiando o tabuleiro inicial
        for (int i = 0; i < SIZE; i++) {
            System.arraycopy(initialBoard[i], 0, board[i], 0, SIZE);
        }

        Scanner scanner = new Scanner(System.in);

        while (true) {
            printBoard();
            System.out.println("Digite a linha, coluna e valor (ex: 1 3 9), ou 0 para sair:");
            int row = scanner.nextInt();
            if (row == 0) break;
            int col = scanner.nextInt();
            int value = scanner.nextInt();

            if (isValidMove(row - 1, col - 1, value)) {
                board[row - 1][col - 1] = value;
            } else {
                System.out.println("Movimento inválido!");
            }

            if (isComplete()) {
                System.out.println("Parabéns! Sudoku completo!");
                printBoard();
                break;
            }
        }

        scanner.close();
    }

    private static void printBoard() {
        for (int i = 0; i < SIZE; i++) {
            if (i % 3 == 0 && i != 0) System.out.println("------+-------+------");
            for (int j = 0; j < SIZE; j++) {
                if (j % 3 == 0 && j != 0) System.out.print("| ");
                System.out.print(board[i][j] == 0 ? ". " : board[i][j] + " ");
            }
            System.out.println();
        }
    }

    private static boolean isValidMove(int row, int col, int value) {
        // Verifica linha e coluna
        for (int i = 0; i < SIZE; i++) {
            if (board[row][i] == value || board[i][col] == value) return false;
        }

        // Verifica sub-quadrante 3x3
        int boxRowStart = row - row % 3;
        int boxColStart = col - col % 3;
        for (int i = boxRowStart; i < boxRowStart + 3; i++) {
            for (int j = boxColStart; j < boxColStart + 3; j++) {
                if (board[i][j] == value) return false;
            }
        }

        return true;
    }

    private static boolean isComplete() {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == 0) return false;
            }
        }
        return true;
    }
}
